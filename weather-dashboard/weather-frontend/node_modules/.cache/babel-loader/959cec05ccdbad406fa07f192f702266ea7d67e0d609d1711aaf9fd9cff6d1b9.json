{"ast":null,"code":"var _jsxFileName = \"/home/user/Project/weather-dashboard/src/DataTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataTable = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 30000); // 30 \n    return () => clearInterval(interval);\n  }, []);\n  const fetchData = async () => {\n    const result = await axios.get('http://localhost:5000/api/weather');\n    setData(result.data);\n  };\n  const handleExport = () => {\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"WeatherData\");\n    const excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const blob = new Blob([excelBuffer], {\n      type: 'application/octet-stream'\n    });\n    saveAs(blob, 'WeatherData.xlsx');\n  };\n  const columns = React.useMemo(() => [{\n    Header: 'City',\n    accessor: 'city'\n  }, {\n    Header: 'Temperature',\n    accessor: 'temperature'\n  }, {\n    Header: 'Pressure',\n    accessor: 'pressure'\n  }, {\n    Header: 'Humidity',\n    accessor: 'humidity'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n          ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n            ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        ...getTableBodyProps(),\n        children: rows.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...row.getRowProps(),\n            children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleExport,\n      children: \"Export to Excel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(DataTable, \"VOKF9xSU2H2WWAa5oyq/fy8PyUc=\", false, function () {\n  return [useTable];\n});\n_c = DataTable;\nexport default DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","useState","useEffect","axios","useTable","saveAs","XLSX","jsxDEV","_jsxDEV","DataTable","_s","data","setData","fetchData","interval","setInterval","clearInterval","result","get","handleExport","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","excelBuffer","write","bookType","type","blob","Blob","columns","useMemo","Header","accessor","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","children","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","fileName","_jsxFileName","lineNumber","columnNumber","row","getRowProps","cells","cell","getCellProps","onClick","_c","$RefreshReg$"],"sources":["/home/user/Project/weather-dashboard/src/DataTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from 'react-table';\nimport { saveAs } from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nconst DataTable = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 30000); // 30 \n    return () => clearInterval(interval);\n  }, []);\n\n  const fetchData = async () => {\n    const result = await axios.get('http://localhost:5000/api/weather');\n    setData(result.data);\n  };\n\n  const handleExport = () => {\n    const ws = XLSX.utils.json_to_sheet(data);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"WeatherData\");\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], { type: 'application/octet-stream' });\n    saveAs(blob, 'WeatherData.xlsx');\n  };\n\n  const columns = React.useMemo(\n    () => [\n      { Header: 'City', accessor: 'city' },\n      { Header: 'Temperature', accessor: 'temperature' },\n      { Header: 'Pressure', accessor: 'pressure' },\n      { Header: 'Humidity', accessor: 'humidity' }\n    ],\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({ columns, data });\n\n  return (\n    <div>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => (\n                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <button onClick={handleExport}>Export to Excel</button>\n    </div>\n  );\n};\n\nexport default DataTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}